  /**
   * Play through a game of Prisoner's Dilemma.
   *
   * @return The payoff awarded to player1
   */
  public int playPrisoner()
  {
 //!! Need to check these values?
    int strat1 = 0, strat2 = 0;
    switch(lastPlay)
    {
      case PUNISHMENT:
        strat1 = player1.getStrategy(Strategy.DEFECT);
        strat2 = player2.getStrategy(Strategy.DEFECT);
        break;
      case SUCKER:
        strat1 = player1.getStrategy(Strategy.DEFECT);
        strat2 = player2.getStrategy(Strategy.COOPERATE);
        break;
      case TEMPTATION:
        strat1 = player1.getStrategy(Strategy.COOPERATE);
        strat2 = player2.getStrategy(Strategy.DEFECT);
        break;
      case REWARD:
        strat1 = player1.getStrategy(Strategy.COOPERATE);
        strat2 = player2.getStrategy(Strategy.COOPERATE);
        break;
      default:
        strat1 = player1.getStrategy(-1);
        strat2 = player2.getStrategy(-1);
    } // switch
    
    int payoff = 0;
    
    switch(strat1)
    {
      case Strategy.COOPERATE:
        switch(strat2)
        {
          case Strategy.COOPERATE:
            if(player1.getPlayersStrategy() instanceof TitForTat)
            {
              if(player2.getPlayersStrategy() instanceof TitForTat)
              {
                player1.updatePayoff(REWARD);
                player2.updatePayoff(REWARD);
              } // if
              else
                player2.updatePayoff(REWARD);
            } // if
            else
              if(player2.getPlayersStrategy() instanceof TitForTat)
                player1.updatePayoff(REWARD);
                
            payoff = REWARD;
            break;
          case Strategy.DEFECT:
            if(player1.getPlayersStrategy() instanceof TitForTat)
            {
              if(player2.getPlayersStrategy() instanceof TitForTat)
              {
                player1.updatePayoff(SUCKER);
                player2.updatePayoff(TEMPTATION);
              } // if
              else
                player2.updatePayoff(TEMPTATION);
            } // if
            else
              if(player2.getPlayersStrategy() instanceof TitForTat)
                player1.updatePayoff(SUCKER);
            
            payoff = SUCKER;
            break;
          default:
 //!! Change to exception later.
            break;
        } // switch
        break;
      case Strategy.DEFECT:
        switch(strat2)
        {
          case Strategy.COOPERATE:
            if(player1.getPlayersStrategy() instanceof TitForTat)
            {
              if(player2.getPlayersStrategy() instanceof TitForTat)
              {
                player1.updatePayoff(TEMPTATION);
                player2.updatePayoff(SUCKER);
              } // if
              else
                player2.updatePayoff(SUCKER);
            } // if
            else
              if(player2.getPlayersStrategy() instanceof TitForTat)
                player1.updatePayoff(TEMPTATION);
            
            payoff = TEMPTATION;
            break;
          case Strategy.DEFECT:
            if(player1.getPlayersStrategy() instanceof TitForTat)
            {
              if(player2.getPlayersStrategy() instanceof TitForTat)
              {
                player1.updatePayoff(PUNISHMENT);
                player2.updatePayoff(PUNISHMENT);
              } // if
              else
                player2.updatePayoff(PUNISHMENT);
            } // if
            else
              if(player2.getPlayersStrategy() instanceof TitForTat)
                player1.updatePayoff(PUNISHMENT);
            
            payoff = PUNISHMENT;
            break;
          default:
 //!! Change to exception later.
            break;
        } // switch
        break;
      default:
 //!! Change to exception later.
        break;
    } // switch
    
    lastPlay = payoff;
    
    return payoff;
    
  } // play
  
  /**
   * Play through a game of Prisoner's Dilemma. Give
   * player1's strategy, for use with testing. 
   *
   * @param strat1 The startegy to be used by the user.
   * @return The payoff awarded to player1
   */
  public int playPrisoner(int strat1)
  {
 //!! Need to check these values?
    int strat2 = 0;
    
    switch(lastPlay)
    {
      case PUNISHMENT:
        strat2 = player2.getStrategy(Strategy.DEFECT);
        break;
      case SUCKER:
        strat2 = player2.getStrategy(Strategy.COOPERATE);
        break;
      case TEMPTATION:
        strat2 = player2.getStrategy(Strategy.DEFECT);
        break;
      case REWARD:
        strat2 = player2.getStrategy(Strategy.COOPERATE);
        break;
      default:
        strat2 = player2.getStrategy(-1);
        break;
    } // switch
    
    int payoff = 0;
    
    switch(strat1)
    {
      case Strategy.COOPERATE:
        switch(strat2)
        {
          case Strategy.COOPERATE:
            player1.updatePayoff(REWARD);
            player2.updatePayoff(REWARD);
            payoff = REWARD;
            break;
          case Strategy.DEFECT:
            player1.updatePayoff(SUCKER);
            player2.updatePayoff(TEMPTATION);
            payoff = SUCKER;
            break;
          default:
 //!! Change to exception later.
            break;
        } // switch
        break;
      case Strategy.DEFECT:
        switch(strat2)
        {
          case Strategy.COOPERATE:
            player1.updatePayoff(TEMPTATION);
            player2.updatePayoff(SUCKER);
            payoff = TEMPTATION;
            break;
          case Strategy.DEFECT:
            player1.updatePayoff(PUNISHMENT);
            player2.updatePayoff(PUNISHMENT);
            payoff = PUNISHMENT;
            break;
          default:
 //!! Change to exception later.
            break;
        } // switch
        break;
      default:
 //!! Change to exception later.
        break;
    } // switch
    
    lastPlay = payoff;
    
    return strat2;
  } // play
  
  /**
   * Acessor for w, probability another game is played.
   *
   * @return The value of w, between 0 and 1
   */
  public static double getW()
  {
    return w;
  } // setW
  
  /**
   * Set the value for w, probability another game is played.
   *
   * @param newW The new value of w, between 0 and 1
   */
  public static void setW(double newW)
  {
//!!!Check value of w.
    w = newW;
  } // setW
  
  /**
   * Method to return the array of available Strategies.
   *
   * @return The strategies array
   */
  public static Strategy [] getStrategies()
  {
    return strategies;
  } // getStrategies
  
  
  public int playPrisoner(double x)
  {
 //!! Need to check these values?
    int strat1 = 0, strat2 = 0;
    switch(lastPlay)
    {
      case PUNISHMENT:
        strat1 = player1.getStrategy(Strategy.DEFECT);
        strat2 = player2.getStrategy(Strategy.DEFECT);
        break;
      case SUCKER:
        strat1 = player1.getStrategy(Strategy.DEFECT);
        strat2 = player2.getStrategy(Strategy.COOPERATE);
        break;
      case TEMPTATION:
        strat1 = player1.getStrategy(Strategy.COOPERATE);
        strat2 = player2.getStrategy(Strategy.DEFECT);
        break;
      case REWARD:
        strat1 = player1.getStrategy(Strategy.COOPERATE);
        strat2 = player2.getStrategy(Strategy.COOPERATE);
        break;
      default:
        strat1 = player1.getStrategy(-1);
        strat2 = player2.getStrategy(-1);
    } // switch
    
    int payoff = 0;
    
    switch(strat1)
    {
      case Strategy.COOPERATE:
        switch(strat2)
        {
          case Strategy.COOPERATE:
            if(player1.getPlayersStrategy() instanceof TitForTat)
            {
              if(player2.getPlayersStrategy() instanceof TitForTat)
              {
                player1.updatePayoff(x * REWARD);
                player2.updatePayoff(x * REWARD);
              } // if
              else
                player2.updatePayoff(x * REWARD);
            } // if
            else
              if(player2.getPlayersStrategy() instanceof TitForTat)
                player1.updatePayoff(x * REWARD);
                
            payoff = REWARD;
            break;
          case Strategy.DEFECT:
            if(player1.getPlayersStrategy() instanceof TitForTat)
            {
              if(player2.getPlayersStrategy() instanceof TitForTat)
              {
                player1.updatePayoff(x * SUCKER);
                player2.updatePayoff(x * TEMPTATION);
              } // if
              else
                player2.updatePayoff(x * TEMPTATION);
            } // if
            else
              if(player2.getPlayersStrategy() instanceof TitForTat)
                player1.updatePayoff(x * SUCKER);
            
            payoff = SUCKER;
            break;
          default:
 //!! Change to exception later.
            break;
        } // switch
        break;
      case Strategy.DEFECT:
        switch(strat2)
        {
          case Strategy.COOPERATE:
            if(player1.getPlayersStrategy() instanceof TitForTat)
            {
              if(player2.getPlayersStrategy() instanceof TitForTat)
              {
                player1.updatePayoff(x * TEMPTATION);
                player2.updatePayoff(x * SUCKER);
              } // if
              else
                player2.updatePayoff(x * SUCKER);
            } // if
            else
              if(player2.getPlayersStrategy() instanceof TitForTat)
                player1.updatePayoff(x * TEMPTATION);
            
            payoff = TEMPTATION;
            break;
          case Strategy.DEFECT:
            if(player1.getPlayersStrategy() instanceof TitForTat)
            {
              if(player2.getPlayersStrategy() instanceof TitForTat)
              {
                player1.updatePayoff(x * PUNISHMENT);
                player2.updatePayoff(x * PUNISHMENT);
              } // if
              else
                player2.updatePayoff(x * PUNISHMENT);
            } // if
            else
              if(player2.getPlayersStrategy() instanceof TitForTat)
                player1.updatePayoff(x * PUNISHMENT);
            
            payoff = PUNISHMENT;
            break;
          default:
 //!! Change to exception later.
            break;
        } // switch
        break;
      default:
 //!! Change to exception later.
        break;
    } // switch
    
    lastPlay = payoff;
    
    return payoff;
    
  } // play